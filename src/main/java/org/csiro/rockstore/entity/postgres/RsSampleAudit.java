package org.csiro.rockstore.entity.postgres;

// Generated 12/08/2015 3:14:54 PM by Hibernate Tools 4.3.1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.Generated;
import org.hibernate.annotations.GenerationTime;
import org.hibernate.annotations.Type;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.vividsolutions.jts.geom.Point;

/**
 * RsSample generated by hbm2java
 */
@Entity
@Table(name = "rs_sample_audit")
@NamedQueries({
	@NamedQuery(
			name="RsSampleAudit.findSampleById",
		    query="SELECT rs FROM RsSampleAudit rs WHERE rs.id = :id"
	)			
})	
public class RsSampleAudit implements java.io.Serializable {

	private int id;
	//private RsCollection rsCollection;
	private String subcollectionId;
	private String igsn;
	private String csiroSampleId;
	private String sampleType;
	private String bhid;
	private Double depth;
	private String datum;	
	private String containerId;
	private String externalRef;
	private String sampleCollector;
	private Date dateSampled;
	private Boolean sampleDispose;
	private Date dateDisposed;
	private String staffidDisposed;
	private Point location;
	private String origLat;
	private String origLon;
	private int version;
	private String lastUpdateUser;
	private String operation;
	private Date auditTimestamp;

	public RsSampleAudit() {
	}
	
	@Column(name = "id", nullable = false)	
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}


	@Column(name = "subcollection_id", length = 200)
	public String getSubcollectionId() {
		return this.subcollectionId;
	}
	
	public String setSubcollectionId(String subcollectionId) {
		return this.subcollectionId = subcollectionId;
	}

	@Column(insertable=false,updatable=false, name = "igsn", length = 50)
	@Generated(GenerationTime.INSERT)
	public String getIgsn() {
		return this.igsn;
	}

	public void setIgsn(String igsn) {
		this.igsn = igsn;
	}

	@Column(name = "csiro_sample_id", length = 200)
	public String getCsiroSampleId() {
		return this.csiroSampleId;
	}

	public void setCsiroSampleId(String csiroSampleId) {
		this.csiroSampleId = csiroSampleId;
	}

	@Column(name = "sample_type", length = 50)
	public String getSampleType() {
		return this.sampleType;
	}

	public void setSampleType(String sampleType) {
		this.sampleType = sampleType;
	}

	@Column(name = "bhid")
	public String getBhid() {
		return this.bhid;
	}

	public void setBhid(String bhid) {
		this.bhid = bhid;
	}

	@Column(name = "depth", precision = 17, scale = 17)
	public Double getDepth() {
		return this.depth;
	}

	public void setDepth(Double depth) {
		this.depth = depth;
	}

	@Column(name = "datum", length = 50)
	public String getDatum() {
		return this.datum;
	}

	public void setDatum(String datum) {
		this.datum = datum;
	}

	@Column(name = "container_id", length = 100)
	public String getContainerId() {
		return this.containerId;
	}

	public void setContainerId(String containerId) {
		this.containerId = containerId;
	}

	@Column(name = "external_ref", length = 300)
	public String getExternalRef() {
		return this.externalRef;
	}

	public void setExternalRef(String externalRef) {
		this.externalRef = externalRef;
	}

	@Column(name = "sample_collector", length = 200)
	public String getSampleCollector() {
		return this.sampleCollector;
	}

	public void setSampleCollector(String sampleCollector) {
		this.sampleCollector = sampleCollector;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_sampled", length = 29)
	public Date getDateSampled() {
		return this.dateSampled;
	}

	public void setDateSampled(Date dateSampled) {
		this.dateSampled = dateSampled;
	}

	@Column(name = "sample_dispose")
	public Boolean getSampleDispose() {
		return this.sampleDispose;
	}

	public void setSampleDispose(Boolean sampleDispose) {
		this.sampleDispose = sampleDispose;
	}
	
	@Column(name = "orig_lat")
	public String getOrigLat() {
		return this.origLat;
	}

	public void setOrigLat(String lat) {
		this.origLat = lat;
	}
	
	@Column(name = "orig_lon")
	public String getOrigLon() {
		return this.origLon;
	}

	public void setOrigLon(String lon) {
		this.origLon = lon;
	}
	
	

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_disposed", length = 29)
	public Date getDateDisposed() {
		return this.dateDisposed;
	}

	public void setDateDisposed(Date dateDisposed) {
		this.dateDisposed = dateDisposed;
	}

	@Column(name = "staffid_disposed", length = 100)
	public String getStaffidDisposed() {
		return this.staffidDisposed;
	}

	public void setStaffidDisposed(String staffidDisposed) {
		this.staffidDisposed = staffidDisposed;
	}

	@Column(name = "location")
	@Type(type="org.hibernate.spatial.GeometryType")
	@JsonIgnore
	public Point getLocation() {
		return this.location;
	}
	
	
	@Transient
	public Double getLon() {
		if(this.getLocation()!=null){
			return this.getLocation().getX();
		}else{
			return null;
		}
		
	}
	
	@Transient
	public Double getLat() {
		if(this.getLocation()!=null){
			return this.getLocation().getY();
		}else{
			return null;
		}
		
	}

	public void setLocation(Point location) {
		this.location = location;
	}
	
	@Id
	@Column(name = "version")
	public int getVersion() {
		return this.version;
	}
		
	public int setVersion(int version) {
		return this.version= version;
	}
	
	@Column(name = "last_update_user")	
	public String getLastUpdateUser() {
		return this.lastUpdateUser;
	}
	
	public String setLastUpdateUser(String lastUpdateUser) {
		return this.lastUpdateUser = lastUpdateUser;
	}
	
	
	@Column(name = "operation")	
	public String getOperation() {
		return this.operation;
	}
	
	public String setOperation(String operation) {
		return this.operation = operation;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "audit_timestamp", length = 29)	
	public Date getAuditTimestamp() {
		return this.auditTimestamp;
	}
	
	public Date setAuditTimestamp(Date auditTimestamp) {
		return this.auditTimestamp = auditTimestamp;
	}

}
