package org.csiro.rockstore.entity.postgres;

// Generated 12/08/2015 3:14:54 PM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Generated;
import org.hibernate.annotations.GenerationTime;

import com.fasterxml.jackson.annotation.JsonBackReference;

/**
 * RsCollection generated by hbm2java
 */
@Entity
@Table(name = "rs_collection", uniqueConstraints = @UniqueConstraint(columnNames = "collection_id"))
@NamedQueries({
	@NamedQuery(
			name="RsCollection.findCollectionById",
		    query="SELECT c FROM RsCollection c WHERE c.collectionId = :collectionId"
		),
	@NamedQuery(
			name="RsCollection.getAllCollection",
		    query="SELECT c FROM RsCollection c"
		)
		
})	
public class RsCollection implements java.io.Serializable {

	private int id;
	private String collectionId;
	private String project;
	private String staffIdFieldManager;
	private String staffidResponsible;
	private String projectResult;
	private String projectPublication;
	private Date projectCloseDate;
	private Boolean availableToPublic;
	private Date archiveDue;
	private Set<RsSample> rsSamples = new HashSet<RsSample>(0);
	private Set<RsSubcollection> rsSubcollections = new HashSet<RsSubcollection>(
			0);

	public RsCollection() {
	}
	
	public RsCollection(String project,
			String staffIdFieldManager, String staffidResponsible,
			String projectResult, String projectPublication,
			Date projectCloseDate, Boolean availableToPublic, Date archiveDue,
			Set<RsSample> rsSamples, Set<RsSubcollection> rsSubcollections) {				
		this.project = project;
		this.staffIdFieldManager = staffIdFieldManager;
		this.staffidResponsible = staffidResponsible;
		this.projectResult = projectResult;
		this.projectPublication = projectPublication;
		this.projectCloseDate = projectCloseDate;
		this.availableToPublic = availableToPublic;
		this.archiveDue = archiveDue;
		this.rsSamples = rsSamples;
		this.rsSubcollections = rsSubcollections;
	}
	
	public RsCollection update(String project,
			String staffIdFieldManager, String staffidResponsible,
			String projectResult, String projectPublication,
			Date projectCloseDate, Boolean availableToPublic, Date archiveDue) {				
		this.setProject(project);
		this.setStaffIdFieldManager(staffIdFieldManager);
		this.setStaffidResponsible(staffidResponsible);
		this.setProjectResult(projectResult);
		this.setProjectPublication(projectPublication);
		this.setProjectCloseDate(projectCloseDate);
		this.setAvailableToPublic(availableToPublic);
		this.setArchiveDue(archiveDue);
		return this;
	}

	@Id
	@Column(name = "id",updatable=false, unique = true, nullable = false)
	@SequenceGenerator(name="rs_collection_id_seq",sequenceName="rs_collection_id_seq", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="rs_collection_id_seq")
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(insertable=false,updatable=false, name = "collection_id", unique = true, length = 50)
	@Generated(GenerationTime.INSERT)
	public String getCollectionId() {
		return this.collectionId;
	}

	public void setCollectionId(String collectionId) {
		this.collectionId = collectionId;
	}

	@Column(name = "project", length = 100)
	public String getProject() {
		return this.project;
	}

	public void setProject(String project) {
		this.project = project;
	}

	@Column(name = "staffid_field_manager", length = 100)
	public String getStaffIdFieldManager() {
		return this.staffIdFieldManager;
	}

	public void setStaffIdFieldManager(String staffIdFieldManager) {
		this.staffIdFieldManager = staffIdFieldManager;
	}

	@Column(name = "staffid_responsible", length = 100)
	public String getStaffidResponsible() {
		return this.staffidResponsible;
	}

	public void setStaffidResponsible(String staffidResponsible) {
		this.staffidResponsible = staffidResponsible;
	}

	@Column(name = "project_result", length = 200)
	public String getProjectResult() {
		return this.projectResult;
	}

	public void setProjectResult(String projectResult) {
		this.projectResult = projectResult;
	}

	@Column(name = "project_publication", length = 200)
	public String getProjectPublication() {
		return this.projectPublication;
	}

	public void setProjectPublication(String projectPublication) {
		this.projectPublication = projectPublication;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "project_close_date", length = 29)
	public Date getProjectCloseDate() {
		return this.projectCloseDate;
	}

	public void setProjectCloseDate(Date projectCloseDate) {
		this.projectCloseDate = projectCloseDate;
	}

	@Column(name = "available_to_public")
	public Boolean getAvailableToPublic() {
		return this.availableToPublic;
	}

	public void setAvailableToPublic(Boolean availableToPublic) {
		this.availableToPublic = availableToPublic;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "archive_due", length = 29)
	public Date getArchiveDue() {
		return this.archiveDue;
	}

	public void setArchiveDue(Date archiveDue) {
		this.archiveDue = archiveDue;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "rsCollection")
	@JsonBackReference
	public Set<RsSample> getRsSamples() {
		return this.rsSamples;
	}

	public void setRsSamples(Set<RsSample> rsSamples) {
		this.rsSamples = rsSamples;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "rsCollection")
	@JsonBackReference
	public Set<RsSubcollection> getRsSubcollections() {
		return this.rsSubcollections;
	}

	public void setRsSubcollections(Set<RsSubcollection> rsSubcollections) {
		this.rsSubcollections = rsSubcollections;
	}

}
