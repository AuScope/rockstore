package org.csiro.rockstore.entity.postgres;

// Generated 12/08/2015 3:14:54 PM by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.Generated;
import org.hibernate.annotations.GenerationTime;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * RsSubcollection generated by hbm2java
 */
@Entity
@Table(name = "rs_subcollection", uniqueConstraints = @UniqueConstraint(columnNames = "subcollection_id"))
@NamedQueries({
	@NamedQuery(
			name="RsSubcollection.findSubCollectionById",
		    query="SELECT c FROM RsSubcollection c WHERE c.subcollectionId = :subcollectionId"
		),
	@NamedQuery(
			name="RsSubcollection.getAllSubCollection",
		    query="SELECT c FROM RsSubcollection c"
		),
	@NamedQuery(
			name="RsSubcollection.findSubCollectionByCollection",
		    query="SELECT c FROM RsSubcollection c INNER JOIN FETCH c.rsCollection LEFT JOIN FETCH c.sampleRangeBySubcollection WHERE c.rsCollection.collectionId = :collectionId"
		)	
		
})	
public class RsSubcollection implements java.io.Serializable {

	private int id;
	private RsCollection rsCollection;
	private String oldId;
	private String subcollectionId;
	private String locationInStorage;	
	private String storageType;
	private Boolean hazardous;
	private String source;
	private Integer totalPallet;
	//private Set<RsSample> rsSamples = new HashSet<RsSample>(0);
	private SampleRangeBySubcollection sampleRangeBySubcollection;

	public RsSubcollection() {
	}

	

	public RsSubcollection(RsCollection rsCollection, String oldId,
			 String locationInStorage, String storageType, Boolean hazardous,
			String source, Integer totalPallet, Set<RsSample> rsSamples) {
		
		this.rsCollection = rsCollection;
		this.oldId = oldId;		
		this.locationInStorage = locationInStorage;		
		this.storageType = storageType;
		this.hazardous = hazardous;
		this.source = source;
		this.totalPallet = totalPallet;
		//this.rsSamples = rsSamples;
	}
	
	public RsSubcollection update(RsCollection rsCollection, String oldId,
			 String locationInStorage, String storageType, Boolean hazardous,
			String source, Integer totalPallet) {				
		this.setRsCollection(rsCollection);
		this.setOldId(oldId);
		this.setLocationInStorage(locationInStorage);		
		this.setStorageType(storageType);
		this.setHazardous(hazardous);
		this.setSource(source);
		this.setTotalPallet(totalPallet);
		return this;
	}

	@Id
	@Column(name = "id",updatable=false, unique = true, nullable = false)
	@SequenceGenerator(name="rs_subcollection_id_seq",sequenceName="rs_subcollection_id_seq", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="rs_subcollection_id_seq")
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne
	@JoinColumn(name = "collection_id", referencedColumnName="collection_id", nullable = false)
	@Fetch(FetchMode.JOIN) 
	@JsonManagedReference
	public RsCollection getRsCollection() {
		return this.rsCollection;
	}

	public void setRsCollection(RsCollection rsCollection) {
		this.rsCollection = rsCollection;
	}

	@Column(name = "old_id", length = 100)
	public String getOldId() {
		return this.oldId;
	}

	public void setOldId(String oldId) {
		this.oldId = oldId;
	}

	@Column(insertable=false,updatable=false, name = "subcollection_id", unique = true, length = 100)
	@Generated(GenerationTime.INSERT)
	public String getSubcollectionId() {
		return this.subcollectionId;
	}

	public void setSubcollectionId(String subcollectionId) {
		this.subcollectionId = subcollectionId;
	}

	@Column(name = "location_in_storage", length = 100)
	public String getLocationInStorage() {
		return this.locationInStorage;
	}

	public void setLocationInStorage(String locationInStorage) {
		this.locationInStorage = locationInStorage;
	}
	
	@Column(name = "storage_type", length = 100)
	public String getStorageType() {
		return this.storageType;
	}

	public void setStorageType(String storageType) {
		this.storageType = storageType;
	}

	@Column(name = "hazardous")
	public Boolean getHazardous() {
		return this.hazardous;
	}

	public void setHazardous(Boolean hazardous) {
		this.hazardous = hazardous;
	}

	@Column(name = "source", length = 200)
	public String getSource() {
		return this.source;
	}

	public void setSource(String source) {
		this.source = source;
	}

	@Column(name = "total_pallet")
	public Integer getTotalPallet() {
		return this.totalPallet;
	}

	public void setTotalPallet(Integer totalPallet) {
		this.totalPallet = totalPallet;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "rsSubcollection")
//	@JsonBackReference
//	public Set<RsSample> getRsSamples() {
//		return this.rsSamples;
//	}
//
//	public void setRsSamples(Set<RsSample> rsSamples) {
//		this.rsSamples = rsSamples;
//	}
	
	@OneToOne
	@NotFound(action=NotFoundAction.IGNORE)
	@Fetch(FetchMode.JOIN)
	@JoinColumn(insertable=false, updatable = false, name = "subcollection_id", referencedColumnName="subcollection_id")	
	public SampleRangeBySubcollection getSampleRangeBySubcollection() {
		return this.sampleRangeBySubcollection;
	}
	
	public void setSampleRangeBySubcollection(SampleRangeBySubcollection sampleRangeBySubcollection) {
		 this.sampleRangeBySubcollection = sampleRangeBySubcollection;
	}

}
